#!/bin/bash

if [ -z "$BASH_VERSION" ]; then
	/bin/bash -- $0 "$@"
	exit $?
fi

declare -gA SV_OPTION
declare -gA SV_SHORT_OPTION
declare -g SV_AUTO_OPTIONS

SVBASE=$(basename $0)
if [ "0" -le "${SVBASE%%.*}" ] 2>/dev/null; then
	SVBASE=${SVBASE##*.}
fi
SVBASEUC=$(echo $SVBASE | tr a-z A-Z)

sv_evaldir() {
	NAME=$1
	DEFAULT=$2
	SUFFIX=$3
	declare -nr CONFIGVAR="${SVBASEUC}_${NAME}"
	declare -nr SVCONFIGVAR="SV_${NAME}"
	if [ -n "$CONFIGVAR" ]; then
		VALUE="$CONFIGVAR"
	elif [ -n "$SVCONFIGVAR" ]; then
		VALUE="$SVCONFIGVAR/$SUFFIX"
	else
		VALUE="$DEFAULT/$SUFFIX"
	fi
	echo ${SVBASEDIR}${VALUE}

}

# call an external application
# cmdline-arguments are passed via EXARGV
# applications return-value is given via RVAL
# return true, when the command was found
sv_call() {
	for i in "$@"; do
		if [ -f "$i.sh" ]; then
			set -- "${EXARGV[@]}"
			. "$i.sh"
			export RVAL=$?
			return 0
		elif [ -x "$i" ]; then
			"$i" "${EXARGV[@]}"
			export RVAL=$?
			return 0
		fi
	done
	return 1
}

sv_group_cmds() {
	declare -gA SV_GROUP_CMDS
	if [ "${#SV_GROUP_CMDS}" -gt 0 ]; then
		return
	fi
	for file in ${SVEXEC}/*; do
		cmd=$(basename "$file" .sh)
		group=$(sed -ne '/^[# ]*SV_GROUP[:= ]\s*/{s/.*[A-Z]*[:= ]\s*\([-_.a-zA-Z]*\).*/\1/;p;q}' $file)
		group=${group:-unsorted}
		SV_GROUP_CMDS[${group}]="$cmd,${SV_GROUP_CMDS[$group]}"
	done
}

sv_help_list() {
	sv_group_cmds
	for grp in "${!SV_GROUP_CMDS[@]}"; do
		echo "Available $grp subcommands:"
		echo ${SV_GROUP_CMDS[$grp]} | sed -e 's/,/\n/g' | sort | column
		echo
	done
}

sv_help_file() {
	if [ -e "${SVEXEC}/$1.sh" ]; then
		sed -ne '/SV_HELP/,/SV_HELP/{/SV_HELP/d;s/^# \?//;p};d' "${SVEXEC}/$1.sh"
	else
		echo no help for $1 found
	fi
}

sv_help() {
	if [ "$#" -le 0 ]; then
		sv_help_list
		return
	fi
	sv_help_file $1
}

sv_call_subverb() {
	SVCMD=$1
	shift
	SVCMD=${SVCMD:-"help"}
	declare -a EXARGV=("$@")

	if ! sv_call "${SVEXEC}/${SVBASE}-${SVCMD}" "${SVEXEC}/${SVCMD}"; then
		if [ "$SVCMD" == "help" ]; then
			sv_help "$@"
			return
		fi
		cat 1>&2 <<ERR
subcommand ${SVCMD} isn't known.
Try '${SVBASE} help' for a list of allowed commands
ERR
		exit 1
	fi
}

parse_config() {
	for i in "$@"; do
		if [ -f "$i" ]; then
			. $i
		fi
		if [ -d "$i" -o -d "$i.d" ]; then
			dir=$([ -d "$i.d" ] && echo "$i.d" || echo "$i")
			for f in $dir/*.conf; do
				. $f
			done
		fi
	done
}

sv_parse_options() {
	while [ $# -gt 0 ]; do
		_OPTDESC=
		case "$1" in
			--*)
				_OPTDESC="${SV_OPTION[${1##--}]}"
				if [ -z "$_OPTDESC" -a "$SV_AUTO_OPTIONS" == 1 ]; then
					_OPTDESC=$(echo ${1##--} | tr a-z A-Z)
					if [ "${2:0:1}" == "-" ]; then
						_OPTDESC=":$_OPTDESC"
					fi
				fi
			;;
			-?)
				_OPTDESC="${SV_SHORT_OPTION[${1##-}]}"
			;;
		esac
		if [ -z "$_OPTDESC" ]; then
			break
		fi
		shift
		case "${_OPTDESC:0:1}" in
			":")
		       		_OPTDESC=${_OPTDESC:1}
				VALUE=1
				;;
			[A-Z0-9])
				VALUE=$1
				shift
				;;
			*)
				echo "$0: invalid option flag for '${_OPTDESC}'"
				exit 1
				;;
		esac
		declare -n NAME="$_OPTDESC"
		NAME="$VALUE"
	done
	declare -ga SV_UNPARSED=("$@")
	return $#
}

sv_default_dir() {
	case "$1" in
		data)
			sv_evaldir SHARED_DIR /usr/share
			;;
		pkgdata)
			sv_evaldir SHARED_DIR /usr/share ${SVBASE}
			;;
		pkglib)
			sv_evaldir LIB_DIR /usr/lib ${SVBASE}
			;;
		subverb)
			sv_evaldir SUBCMD_DIR /usr/lib ${SVBASE}/subverb
			;;
		sysconf)
			sv_evaldir SYSCONFIG /etc ${SVBASE}
			;;
		*)
			echo "unknown dir-class $1" 1>&2
			exit 1
			;;
	esac
}

SVEXEC=$(sv_default_dir subverb)

if sv_call "${SVEXEC}-pre"; then
	if [ $RVAL -ne 0 ]; then
		echo "$0: command preparation failed"
		exit $RVAL
	fi
fi

declare -nr CONFIGNAME="${SVBASEUC}_CONFIGNAME"
if [ -z "$CONFIGNAME" ]; then
	CONFIGNAME="config"
fi
parse_config "$(sv_default_dir pkgdata)/$CONFIGNAME"
parse_config "$(sv_default_dir sysconf)"
parse_config "$HOME/.${SVBASE}"
parse_config "$HOME/.config/${SVBASE}"
sv_parse_options "$@"

if sv_call "${SVEXEC}-configured" && [ $RVAL -ne 0 ]; then
	echo "$0: command configuration invalid"
	exit $RVAL
fi

sv_call_subverb "${SV_UNPARSED[@]}"

RET=$RVAL
sv_call "${SVEXEC}-post"

exit $RET

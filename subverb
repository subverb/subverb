#!/bin/bash

if [ -z "$BASH_VERSION" ]; then
	/bin/bash -- $0 "$@"
	exit $?
fi

SVBASE=$(basename $0)
if [ "0" -le "${SVBASE%%.*}" ] 2>/dev/null; then
	SVBASE=${SVBASE##*.}
fi
SVBASEUC=$(echo $SVBASE | tr a-z A-Z)
SVCMD=$1
shift
SVCMD=${SVCMD:-"help"}

evaldir() {
	NAME=$1
	DEFAULT=$2
	SUFFIX=$3
	eval CONFIGVAR="\$${SVBASEUC}_${NAME}"
	eval SVCONFIGVAR="\$SV_${NAME}"
	if [ -n "$CONFIGVAR" ]; then
		VALUE="$CONFIGVAR"
	elif [ -n "$SVCONFIGVAR" ]; then
		VALUE="$SVCONFIGVAR/$SUFFIX"
	else
		VALUE="$DEFAULT/$SUFFIX"
	fi
	echo ${SVBASEDIR}${VALUE}

}

# call an external application
# cmdline-arguments are passed via EXARGV
# applications return-value is given via RVAL
# return true, when the command was found
call() {
	for i in "$@"; do
		if [ -f "$i.sh" ]; then
			set -- "${EXARGV[@]}"
			. "$i.sh"
			export RVAL=$?
			return 0
		elif [ -x "$i" ]; then
			exec "$i" "${EXARGV[@]}"
			export RVAL=$?
			return 0
		fi
	done
	return 1
}

SVCONF=$(evaldir CONFIG_FILE /etc ${SVBASE})
SVEXEC=$(evaldir SUBCMD_DIR /usr/lib ${SVBASE}/subverb)

test -f $SVCONF && . $SVCONF

declare -a EXARGV=("$@")
if call "${SVEXEC}-pre"; then
	if [ $RVAL -ne 0 ]; then
		echo "$0: command preparation failed"
		exit $RVAL
	fi
fi

if ! call "${SVEXEC}/${SVBASE}-${SVCMD}" "${SVEXEC}/${SVCMD}"; then
	cat 1>&2 <<ERR
subcommand ${SVCMD} isn't known.
Try '${SVBASE} help' for a list of allowed commands
ERR
	exit 1
fi

RET=$RVAL
call "${SVEXEC}-post"

exit $RET

#!/bin/bash

if [ -z "$BASH_VERSION" ]; then
	/bin/bash -- $0 "$@"
	exit $?
fi

declare -gA SV_OPTION
declare -gA SV_SHORT_OPTION
declare -gA SV_OPTION_HELP
declare -g SV_AUTO_OPTIONS

case "${SVBASEDIR}" in
	"")
	;;
	"*/")
	;;
	*)
	export SVBASEDIR="${SVBASEDIR}/";
	;;
esac

SVBASE=$(basename $0)
if [ "0" -le "${SVBASE%%.*}" ] 2>/dev/null; then
	SVBASE=${SVBASE##*.}
fi
SVBASEUC=$(echo $SVBASE | tr a-z A-Z)

case "$0" in
	*/*)
		_SVBASECMD="$0"
		;;
	*)
		_SVBASECMD=$(which $0)
		;;
esac
export SVBASEEXECDIR=$(dirname $_SVBASECMD)
export PATH="$PATH:$SVBASEEXECDIR"
case "$SVBASEEXECDIR" in
	*/bin|bin|*/sbin|sbin)
		export SVBASEROOTDIR=$(dirname $SVBASEEXECDIR)
	;;
	*)
		export SVBASEROOTDIR=${SVBASEEXECDIR}
	;;
esac
export SVBASESHAREDIR="$SVBASEROOTDIR/share"
export SVBASELIBDIR="$SVBASEROOTDIR/lib"
if [ "$SVBASEROOTDIR" = "/usr" ]; then
	export SVBASECONFDIR=/etc
else
	export SVBASECONFDIR="$SVBASEROOTDIR/etc"
fi

sv_evaldir() {
	NAME=$1
	DEFAULT=$2
	SUFFIX=$3
	declare -nr CONFIGVAR="${SVBASEUC}_${NAME}"
	declare -nr SVCONFIGVAR="SV_${NAME}"
	if [ -n "$CONFIGVAR" ]; then
		VALUE="$CONFIGVAR"
	elif [ -n "$SVCONFIGVAR" ]; then
		VALUE="$SVCONFIGVAR/$SUFFIX"
	else
		VALUE="$DEFAULT/$SUFFIX"
	fi
	echo ${SVBASEDIR}${VALUE}

}

_sv_call_altshebang() {
	sv_shebang_regex="#\s*SV_SHEBANG\s*[:=]?\s*(.*)"
	if ( head -n 1 $1 | grep -q "^#!" ) &&
			[[ "$(head -n 2 $1 | tail -n 1)" =~ $sv_shebang_regex ]]; then
		SV_SHEBANG=${BASH_REMATCH[1]}
		$SV_SHEBANG "$@"
	else
		"$@"
	fi
}

# call an external application
# cmdline-arguments are passed via EXARGV
# applications return-value is given via RVAL
# return true, when the command was found
sv_call() {
	export RVAL="-1"
	for i in "$@"; do
		for ext in .sh ""; do
			file="${i}${ext}"
			case "$file" in
				*.sh)
					if [ -f "$file" ]; then
						set -- "${EXARGV[@]}"
						. "$file"
						export RVAL=$?
						return 0
					fi
					;;
				*)
					if [ -x "$i" ]; then
						_sv_call_altshebang "$i" "${EXARGV[@]}"
						export RVAL=$?
						return 0
					fi
					;;
			esac
		done
	done
	return 1
}

sv_group_cmds() {
	declare -gA SV_GROUP_CMDS
	if [ "${#SV_GROUP_CMDS}" -gt 0 ]; then
		return
	fi
	for file in ${SVEXEC}/*; do
		cmd=$(basename "$file" .sh)
		group=$(sed -ne '/^[# ]*SV_GROUP[:= ]\s*/{s/.*[A-Z]*[:= ]\s*\([-_.a-zA-Z]*\).*/\1/;p;q}' $file)
		group=${group:-unsorted}
		SV_GROUP_CMDS[${group}]="$cmd,${SV_GROUP_CMDS[$group]}"
	done
}

_sv_print_docfile() {
	file="$(sv_default_dir doc)/$1"
	if [ ! -f $file ]; then
		return 1
	fi
	echo
	cat $file
}

sv_sort() {
	for i in "$@"; do echo $i; done | sort
}

sv_append_arrval() {
	declare -n ass_arr="$1"
	key=$2
	val=$3
	sep=$4
	if [ -z "${ass_arr[$key]}" ]; then
		ass_arr[$key]=$val
	else
		ass_arr[$key]="${ass_arr[$key]}$sep$val"
	fi
}

_sv_help_printtitle() {
	declare name=$1
	declare shortdesc=$2
	if [ -n "$shortdesc" ]; then
		cat <<PLAIN_HEADER
$name - $shortdesc

PLAIN_HEADER
	fi
}

_sv_help_printcmds() {
	sv_group_cmds
	if [ "${#SV_GROUP_CMDS[@]}" -le 0 ]; then
		return
	fi
	for grp in "${!SV_GROUP_CMDS[@]}"; do
		echo "Available $grp subcommands:"
		echo ${SV_GROUP_CMDS[$grp]} | sed -e 's/,/\n/g' | sort | column
		echo
	done

}

sv_option_help() {
	declare cmd="$1"
	declare desc="${2:-"Supported options:"}"
	declare -A help_option
	for opt in "${!SV_OPTION[@]}"; do
		sv_append_arrval help_option ${SV_OPTION[$opt]} "--$opt" ", "
	done
	for opt in "${!SV_SHORT_OPTION[@]}"; do
		sv_append_arrval help_option ${SV_SHORT_OPTION[$opt]} "-$opt" ", "
	done

	if [ -z "${!help_option[*]}" ]; then
		return
	fi

	varsort=($(sv_sort "${!help_option[@]}"))
	echo $desc
	for var in "${varsort[@]}"; do
		declare vardesc="${help_option[$var]}"
		if [ "${var:0:1}" == ":" ]; then
			var=${var:1}
		else
			vardesc="${vardesc} <param>"
		fi
		echo -e "\t${vardesc}\t${SV_OPTION_HELP[$var]}"
	done
}

sv_help_list() {
	declare -nr DESCVAR="${SVBASEUC}_DESCRIPTION"
	_sv_help_printtitle ${SVBASE} "${DESCVAR}"
	_sv_help_printcmds
	sv_option_help $SVBASE "Supported global options:"
	if [ $SVH_LONG -gt 0 ]; then
		_sv_print_docfile HELP.md || _sv_print_docfile README.md
	fi
}

sv_help_file() {
	subverb="$1"
	file="${2:-${SVEXEC}/$1}"
	run_option_help=0
	parse_sv_help=1
	help_handling="$(sed -ne '/SV_HANDLE_HELP[:=]\s*/{s/.*SV_HANDLE_HELP[:=]\s*"\?\s*\(\w\+\)\s*"\?.*/\1/;p;q}' "$file")"
	case "$help_handling" in
		self)
			"$file" help
			parse_sv_help=0
			;;
		sourced)
			. "$file" "_help_source_"
			run_option_help=1
			if [ -n "$SV_HELP" ]; then
				_sv_help_printtitle ${SVBASE}-${subverb} "$SV_HELP"
				parse_sv_help=0
			fi
			;;
		"")
			;;
		*)
			echo "unknown help handling $help_handling for subverb $subverb" >&2
			;;
	esac
	if [ $parse_sv_help -gt 0 ]; then
		_sv_help_printtitle ${SVBASE}-${subverb} "$(sed -ne '/SV_HELP/,/SV_HELP/{/SV_HELP/d;s/^# \?//;p};d' "$file")"
	fi
	if [ $run_option_help -gt 0 ]; then
		sv_option_help "$SVBASE $subverb"
	fi
	if [ $SVH_LONG -gt 0 ]; then
		_sv_print_docfile ${SVBASE}-${subverb}.md || _sv_print_docfile ${subverb}.md
	fi
}

sv_help() {
	declare -xl SVH_FORMAT=plain
	declare -xi SVH_LONG=0
	declare -a params
	for param in "$@"; do
		case "$param" in
			--long) SVH_LONG=1;;
			--man) SVH_FORMAT=man; SVH_LONG=1;;
			*) params+=($param);;
		esac
	done
	set -- "${params[@]}"

	if [ "$#" -le 0 ]; then
		sv_help_list
		return
	fi
	file="${SVEXEC}/$1"
	[ -f "$file.sh" ] && file="$file.sh"
	if [ ! -f "$file" ]; then
		echo no help for $1 found >&2
		return 1
	fi
	sv_help_file $1 "$file"
}

sv_call_subverb() {
	SVCMD=${1:-"help"}
	shift
	declare -a EXARGV=("$@")

	SVCHKDIR=
	case "${SVCMD}" in
		/*)
			SVCHKDIR=$(dirname ${SVCMD})
			;;
		./*)
			SVCMD="${PWD}/${SVCMD}"
			SVCHKDIR=$(dirname ${SVCMD})
			;;
		*/*)
			if [ ! \( -f "${SVEXEC}/${SVCMD}" -o -f ${SVEXEC}/${SVCMD}.* \) ]; then
				SVCHKDIR="$(pwd)/$(dirname ${SVCMD})"
			fi
			;;
	esac

	if [ -n "${SVCHKDIR}" ]; then
		SVCHKDIR=$(realpath -m ${SVCHKDIR})
		case "${SVEXEC}" in
			/*/./*|/*/../*)
				SVEXEC=$(realpath -m "${SVEXEC}")
				;;
			/*)
				;;
			*)
				SVEXEC=$(realpath -m "${PWD}/${SVEXEC}")
				;;
		esac
		if [ "${SVCHKDIR}" == "${SVEXEC}" ]; then
			SVCMD=$(basename ${SVCMD})
		elif [ -n "${SV_ALLOW_UNSAFE_SUBVERB}" -a "${SV_ALLOW_UNSAFE_SUBVERB}" -ge 1 ]; then
			if ! sv_call "${SVCMD}"; then
				echo "unsafe subverb '${SVCMD}' wasn't found." >&2
				exit 1
			fi
			return 0
		else
			echo "execution of unsafe subverb '${SVCMD}' denied" >&2
			exit 1
		fi
	fi

	if ! sv_call "${SVEXEC}/${SVBASE}-${SVCMD}" "${SVEXEC}/${SVCMD}"; then
		if [ "$SVCMD" == "help" ]; then
			sv_help "$@"
			return
		elif [ "$SVCMD" == "list" ]; then
			sv_group_cmds
			for grp in "${!SV_GROUP_CMDS[@]}"; do echo "${SV_GROUP_CMDS[$grp]}" | sed -e 's/,/\n/g'; done | grep -ve '^$' | sort -u
			return
		fi
		cat 1>&2 <<ERR
subcommand ${SVCMD} isn't known.
Try '${SVBASE} help' for a list of allowed commands
ERR
		exit 1
	fi
}

parse_config() {
	for i in "$@"; do
		if [ -f "$i" ]; then
			. $i
		fi
		if [ -d "$i" -o -d "$i.d" ]; then
			dir=$([ -d "$i.d" ] && echo "$i.d" || echo "$i")
			for f in $dir/*.conf; do
				. $f
			done
		fi
	done
}

sv_parse_options() {
	while [ $# -gt 0 ]; do
		_OPTDESC=
		case "$1" in
			--*)
				_OPTDESC="${SV_OPTION[${1##--}]}"
				if [ -z "$_OPTDESC" -a "$SV_AUTO_OPTIONS" == 1 ]; then
					_OPTDESC=$(echo ${1##--} | tr a-z A-Z)
					if [ "${2:0:1}" == "-" ]; then
						_OPTDESC=":$_OPTDESC"
					fi
				fi
			;;
			-?)
				_OPTDESC="${SV_SHORT_OPTION[${1##-}]}"
			;;
		esac
		if [ -z "$_OPTDESC" ]; then
			break
		fi
		shift
		case "${_OPTDESC:0:1}" in
			":")
		       		_OPTDESC=${_OPTDESC:1}
				VALUE=1
				;;
			[A-Z0-9])
				VALUE=$1
				shift
				;;
			*)
				echo "$0: invalid option flag for '${_OPTDESC}'"
				exit 1
				;;
		esac
		declare -n NAME="$_OPTDESC"
		NAME="$VALUE"
	done
	declare -ga SV_UNPARSED=("$@")
	return $#
}

sv_default_dir() {
	case "$1" in
		data)
			sv_evaldir SHARED_DIR ${SVBASESHAREDIR}
			;;
		pkgdata)
			sv_evaldir SHARED_DIR ${SVBASESHAREDIR} ${SVBASE}
			;;
		pkglib)
			sv_evaldir LIB_DIR ${SVBASELIBDIR} ${SVBASE}
			;;
		subverb)
			sv_evaldir SUBCMD_DIR ${SVBASELIBDIR} ${SVBASE}/subverb
			;;
		sysconf)
			sv_evaldir SYSCONFIG ${SVBASECONFDIR} ${SVBASE}
			;;
		doc)
			sv_evaldir SHARED_DIR ${SVBASESHAREDIR} doc/${SVBASE}
			;;
		*)
			echo "unknown dir-class $1" 1>&2
			exit 1
			;;
	esac
}

SVEXEC=$(sv_default_dir subverb)

if sv_call "${SVEXEC}-pre"; then
	if [ $RVAL -ne 0 ]; then
		echo "$0: command preparation failed"
		exit $RVAL
	fi
fi

declare -nr CONFIGNAME="${SVBASEUC}_CONFIGNAME"
if [ -z "$CONFIGNAME" ]; then
	CONFIGNAME="config"
fi
parse_config "$(sv_default_dir pkgdata)/$CONFIGNAME"
parse_config "$(sv_default_dir sysconf)"
parse_config "$HOME/.${SVBASE}"
parse_config "$HOME/.config/${SVBASE}"
sv_parse_options "$@"

if sv_call "${SVEXEC}-configured" && [ $RVAL -ne 0 ]; then
	echo "$0: command configuration invalid"
	exit $RVAL
fi

sv_call_subverb "${SV_UNPARSED[@]}"

RET=$RVAL
sv_call "${SVEXEC}-post"

exit $RET
